//Global variables
global string $ProTrusionMenu;
global string $floorPlanCurve;
global string $fpCurve;

global proc LoadFloorPlan()
{
    
}

global proc SaveFloorPlan()
{
    
}

global proc LoadProfile()
{
    
}

global proc SaveProfile()
{
    
}


//Creates new floor plan curve
global proc CreateFloorPlan()
{
    enableIsolateSelect floorPlanPanel 1;
    isolateSelect -state 1 floorPlanPanel;

    global string $floorPlanCurve;
    global string $fpCurve;
   //Select the floor plan panel
   
   
   //Set curve to linear EP curve
   $floorPlanCurve = `curveEPCtx`;
   setToolTo $floorPlanCurve;
   curveEPCtx -e -d 1 -bez 0 `currentCtx`; 

   //TODO - how can we get this wait for the user to draw to store the name 

   string $fp[] = `ls -sl`;
   $floorPlanCurve = $fp[0];
   

   print "Set floorplan name ";
   print $floorPlanCurve;
}

//Edits the floor plan curve
global proc EditFloorPlan()
{
    global string $floorPlanCurve;
   //TODO - do we need to do this? Can we just let the user use reg maya fn?
   select -r curve1;
}

//Creates a new profile (adds tab if there is already one)
global proc CreateNewProfile()
{
    
}

//Edits the selected profile curve
global proc EditProfile()
{
    
}

//Links the selected profile to  floor plan edge 
//Validate floor plan edge selection
global proc LinkProfileToFloorPlan()
{
    
}

//Links anchor to floor plan
//Validates floor plan edge selection
global proc LinkAnchorToFloorPlan()
{
    
}

//Links anchor to profile
//Validates profile edge selection
global proc LinkAnchorToProfile()
{
    
}

//Creates a list of the edit points for a given curve (FP or Profile)
global proc vector[] GetEditPoints(string $curve)
{
    string $infoNode = `createNode curveInfo`;
    connectAttr ($curve +".worldSpace")  ($infoNode+".inputCurve");
    //#CV's = degree + curve span & #EP's = CV - 2 -> TODO- double check that is always the case..was in the examples i checked!!!
    int $degree = eval("getAttr "+$curve+".degree");
    int $span = eval("getAttr "+$curve+".spans");  	
	int $numEPs = $span + $degree - 2;
    vector $editPoints[];
    
	for ($i=0; $i < $numEPs; $i++)
	{
		float $ep[]   = `pointPosition -l ( $curve + ".ep["+$i+"]" )`;
		vector $temp = <<$ep[0], $ep[1], $ep[2]>>;
		print($ep[0]+" "+$ep[1]+" "+$ep[2]+"\n");
		$editPoints[$i] = $temp;
	}

	delete $infoNode; //Delete node bc we don't need it anymore	
	return $editPoints;
}


//Creates a new building from the selected input
global proc CreateMesh()
{

    //****************************************************************************
    //TODO - make dynamic (ie not curve1)
    // -This part could be called in to an "AssignCurveAsFloorPlan" fn. or
    // when the user is creating the curve... Greg? 
    //Parse the floorplan coordinates to list
    //****************************************************************************
    vector $floorPlanArray[] = GetEditPoints("curve1");    
    //Make sure that the start = end
    int $size = size($floorPlanArray) - 1;
    vector $start = $floorPlanArray[0];
    float $sx = $start.x; float $sy = $start.y; float $sz = $start.z;
    vector $end = $floorPlanArray[$size];
    float $ex = $end.x; float $ey = $end.y; float $ez = $end.z;
    if ($sx != $ex || $sy != $ex || $sz != $ez)
    {
        select -r curve1.cv[$size+2];
        curve -os -a -p $sx $sy $sz curve1;  
    }    
    //**************************************************************************** 


    //TODO - figure out how to delete the nodes if they exist
   // if(`objExists transformNode`)
           //doDelete;
     //Create node
    createNode transform -n transformNode;
    createNode mesh -n meshShape -p transformNode;
    sets -add initialShadingGroup meshShape;
    //createNode ProTrusionNode -n ProTrusionNode1;
    
    //connectAttr....TODO - add in the other attributes here
    //connectAttr ProTrusionNode1.outputMesh meshShape.inMesh;
 
    //Draw mesh
}

//Updates the selected mesh (just redraw the mesh-> used later when handle more than 1 building)
global proc EditMesh()
{
    
}


//****************************************************************************************************************
// GUI LAYOUT 
//****************************************************************************************************************
global proc ProGUI()
{
// window;
if(`window -exists myFormPanelWindow`)
deleteUI -window myFormPanelWindow;
if (`modelPanel -exists floorPlanPanel`)
    deleteUI -panel floorPlanPanel;
if (`modelPanel -exists profilePanel`)
    deleteUI -panel profilePanel;
window
-title "Pro-trusion"
-w 650
-h 600

myFormPanelWindow;
//form layout
formLayout -numberOfDivisions 100 myFormForm;

//Menu bar
menuBarLayout popUpMenu;
    menu -label "Floor plan";
        menuItem
        -label "Load floor plan"
        -command "LoadFloorPlan()";
        menuItem
        -label "Save floor plan"
        -command "SaveFloorPlan()";
        menuItem
        -label "Create new plan"
        -command "CreateFloorPlan()";
        menuItem
        -label "Edit floor plan"
        -command "EditFloorPlan()";
     menu -label "Profile";
        menuItem
        -label "Load profile"
        -command "LoadProfile()";
        menuItem
        -label "Save profile"
        -command "SaveProfile()";
        menuItem
        -label "Create new profile"
        -command "CreateNewProfile()";
        menuItem
        -label "Edit selected profile"
        -command "EditProfile()";
     menu -label "Assign profile/anchors";
        menuItem
        -label "Link profile to floor plan edge"
        -command "LinkProfileToFloorPlan()";
        menuItem
        -label "Assign anchor to floor plan"
        -command "LinkAnchorToFloorPlan()";
        menuItem 
        -label "Assign anchor to profile"
        -command "LinkAnchorToProfile()";
     menu -label "Create building mesh";
         menuItem
         -label "Generate building"
         -command "CreateMesh()";
         menuItem
         -label "Update selected building"
         -command "UpdateMesh()";
     menu -label "Help";
         menuItem
         -label "Help"
         -command "Help()";
    setParent..;

string $sep = `separator -style "singleDash"`;

//Descriptions
string $floorPlanTxt = `text "Floor plan input\t\t\t\t\t"`;
string $profileTxt = `text "Profile input"`;

//Floor plan editor
modelPanel -mbv 0 -cam "top" floorPlanPanel;
$currentModelPanel = `modelPanel -q -modelEditor floorPlanPanel`;
modelEditor -e -cam "top" -allObjects 1 -grid 1 -nurbsSurfaces 1 -dimensions 1 $currentModelPanel;
setParent ..;

//Profile editor
modelPanel -mbv 0 -cam "side" profilePanel;
$currentModelPanel2 = `modelPanel -q -modelEditor profilePanel`;
modelEditor -e -cam "side" -allObjects 0 -grid 1 -nurbsSurfaces 1 -dimensions 1 $currentModelPanel2;
setParent ..;


//button -l "Left Button" LeftButton;
formLayout -edit

-attachForm $sep top 19
-attachForm $sep left 0
-attachForm $sep right 0
-attachForm $sep bottom 625

-attachForm $floorPlanTxt top 20
-attachForm $floorPlanTxt left 0
-attachForm $floorPlanTxt right 325
-attachForm $floorPlanTxt bottom 600

-attachForm $profileTxt top 20
-attachForm $profileTxt left 0
-attachForm $profileTxt right -325
-attachForm $profileTxt bottom 600

-attachForm popUpMenu top 0
-attachForm popUpMenu left 0
-attachForm popUpMenu right 0
-attachForm popUpMenu bottom 0

-attachForm floorPlanPanel top 45
-attachForm floorPlanPanel left 10
-attachForm floorPlanPanel right 370
-attachForm floorPlanPanel bottom 10


-attachForm profilePanel top 45
-attachForm profilePanel left 360
-attachForm profilePanel right 10
-attachForm profilePanel bottom 10


/*
-attachControl LeftButton top 2 floorPlanPanel
-attachForm LeftButton left 0
-attachPosition LeftButton right 2 50
-attachForm LeftButton bottom 2
*/

//Form
myFormForm;
showWindow myFormPanelWindow;
}


//TODO - add to C++ to add/remove menu item when the plugin is loaded
global proc createMenuItem()
{
   global string $gMainWindow;
    setParent $gMainWindow;
    global string $ProTrusionMenu;
    $ProTrusionMenu = `menu -label "Pro-Trusion" -parent $gMainWindow -tearOff on`;
    menuItem
    -label "Open Pro-Trusions Options"  
    -command "ProGUI()";                
}

global proc deleteMenuItem()
{
    global string $ProTrusionMenu;
    deleteUI -menu $ProTrusionMenu;
}