//Global variables
global string $ProTrusionMenu;

//Curve names
global string $floorPlanCurve;
global string $profileCurves[];

//Profile info
global int $fpEdgeToProfile[]; 
global int $numPtsInProfile[]; 
global vector $pPoints[];

//Anchor info
global int $fpHasAnchor[];
global int $pHasAnchor[];  //TODO - maybe get rid of these guys

//Each of these anchors are linked to a specific fp & profile edge (indices match for each anchor)
global string $anchorFiles[];
global float $anchorFPEdge[]; //edge#.percentInbetween
global int $anchorProfileNum[]; //the profile the anchor is linked to 
global float $anchorProfileEdge[]; //edge#.percentInbetween

global proc LoadFloorPlan()
{
    
}

global proc SaveFloorPlan()
{
    
}

global proc LoadProfile()
{
    
}

global proc SaveProfile()
{
    
}


//Creates new floor plan curve
global proc CreateFloorPlan()
{
     //TODO - Select the floor plan panel
    //enableIsolateSelect floorPlanPanel 1;
    //isolateSelect -state 1 floorPlanPanel;

   //Set curve to linear EP curve
   $fpC = `curveEPCtx`;
   setToolTo $fpC;
   curveEPCtx -e -d 1 -bez 0 `currentCtx`; 
   
   //TODO - how can we get this wait for the user to draw to store the name...this isn't working! :(
   //evalDeferred;  
   //string $fp[] = `ls -sl`;
   //$floorPlanCurve = $fp[0];
}


//Creates a new profile (adds tab if there is already one)
global proc CreateNewProfile()
{
    //TODO - Hightlight the profile modelPanel 
    
    //Set curve to linear EP curve
   $pCurve = `curveEPCtx`;
   setToolTo $pCurve;
   curveEPCtx -e -d 1 -bez 0 `currentCtx`;  
}

//Deletes the selected profile
//stringArrayRemoveAtIndex.mel does this for strings, but none for ints, so manually doing this the inefficient way
global proc DeleteProfile()
{
    global string $profileCurves[];
    global int $fpEdgeToProfile[]; 
    global int $numPtsInProfile[]; 
    global vector $pPoints[];
    global int $pHasAnchor[];
    
    string $tempCurves[];
    int $tempNumPtsInProfile[];
    vector $tempPPoints[];
    int $tempPHasAnchor[];
    string $curves[] = `ls -sl`;
    
    int $i = 0; 
    int $index;
    int $k = 0;
    for ($curve in $profileCurves)
    {
         
        if ($curve == $curves[0])
        {
           $index = $i;           
        } else 
        {
          $tempCurves[$k] = $profileCurves[$i];
          $tempNumPtsInProfile[$k] = $numPtsInProfile[$i];
          $tempPPoints[$k] = $pPoints[$i];
          $tempPHasAnchor[$k] = $pHasAnchor[$i];  
          $k++; 
        }
        $i++;
    }
    
     //Check to see that the profile is not in the floor plan.  Also, move all fp to profile indices
     //back 1 after the one that has been removed
    for ($i = 0; $i < size($fpEdgeToProfile); $i++)
    {
        if ($fpEdgeToProfile[$i] > $index){
            $fpEdgeToProfile[$i] = ($fpEdgeToProfile[$i] - 1);
        } else if ($fpEdgeToProfile[$i] == $index){
            print "Warning: the profile edge you are deleting was assinged to the floor plan. ";
            print "You must reassign the edge before generating a building.\n";
             $fpEdgeToProfile[$i] = -1;
        }
    }
    
}

//Validate floor plan edge selection
//anchorOrProfile = 0 if anchor, 1 if profile
//fpOrProfile = 0 if profile, 1 if floorplan 
global proc EdgeValidationHelper(string $win, int $anchorOrProfile, int $fpOrProfile)
{
    //For the anchor points
    global int $fpHasAnchor[];
    global int $pHasAnchor[];
    global string $profileCurves[];
    
    //Check that there are 2 endpoints & that they are next to eachother
    string $points[] = `ls -sl`;
    int $i, $start, $end;
    int $success = 0;  
 
    if (size($points) == 1)
    {      
        string $splitColon[];
        string $splitBracketF[];
        string $splitBracketB[];
        tokenize $points[0] ":" $splitColon; 
        //If there is a colon, the selection is OK. 
        //Split out points & add them to edge points
        if (size($splitColon) > 1)
        {
          tokenize $splitColon[0] "[" $splitBracketF;  
          tokenize $splitColon[1] "]" $splitBracketB;
          $start = $splitBracketF[1];
          $end = $splitBracketB[0];  
          if ($end < $start)
              $start = $end;
          $success = 1;
        }

    } else if(size($points)== 2 )
    {
        int $k;
        int $tempPts[2];
        for ($k = 0; $k < size($points); $k++)
        {
             string $splitBracketF[];   
             string $splitBracketB[]; 
             tokenize $points[$k] "[" $splitBracketF;          
             tokenize $splitBracketF[1] "]" $splitBracketB;   
             $tempPts[$k] = $splitBracketB[0];      
        }
        if ($tempPts[0] < $tempPts[1])
        {
             $start = $tempPts[0];   
             $end = $tempPts[1];
        } else {
             $start = $tempPts[1];   
             $end = $tempPts[0];
        }
    } 
    deleteUI $win;
    
    if ($success == 1 && $anchorOrProfile == 1)
    {
       $win2 = `window -title "Profile selector" edgePrompt`;
       columnLayout;
            text "Select profile that you want to assign to the edge.\n";
            rowLayout -numberOfColumns 2;
            // ("Test "+$stringA+" "+$stringB)`
                button -label "Confirm" -command ("ProfileToFPHelper2 "+$win2 +" "+$start);
                button -label "Cancel" -command ("deleteUI " + $win2);
                setParent..;
       showWindow edgePrompt;
    } else if ($success == 1 && $anchorOrProfile == 0) {
        if ($fpOrProfile == 0)
        {
            //TODO - Number curve + offset
           string $splitDot[];
           tokenize $points[0] "." $splitDot; 
           int $k = 0; 
           for ($c in $profileCurves)
           {
               if ($c == $splitDot[0]) break;
               $k++;
           }
           $pHasAnchor[$k + $start] = 1;
        } else {
           $fpHasAnchor[$start] = 1;
        }
    } else 
    {
        print "Error. You must select two vertices that surround an edge.\n";
    }
}

//Makes sure that the curve selected for the profile has been added.  Add it if not.
global proc ProfileToFPHelper2(string $window, int $edge)
{
    global int $fpEdgeToProfile[];
    global string $profileCurves[];
    
    string $curve[] = `ls -sl`;
    if (size($curve) != 1)
    {
        print "You must select one curve.\n";
    }
    
    int $i;
    int $flag = 0;
    //Check if curve in list
    for ($i = 0; $i < size($profileCurves); $i++)
    {
        if ($profileCurves[$i] == $curve[0]) 
        {
                        
            $fpEdgeToProfile[$edge] = $i; 
            print ("Adding profile: " + $i +" to edge " + $edge + "\n");
            $flag = 1;
            break;
        }
    }
    //Add if not in list    
    if ($flag == 0)
    {
       CurveAsProfile();
       $fpEdgeToProfile[$edge]  = (size($profileCurves) - 1); 
    }
    
    deleteUI $window;
}

//Links the selected profile to  floor plan edge 
global proc LinkProfileToFloorPlan()
{
    global string $floorPlanCurve;
    global string $profileCurves[];
  
    //Select floor plan & turn mode to edit points
    select -r $floorPlanCurve; 
    doMenuNURBComponentSelection($floorPlanCurve, "editPoint");
    $win = `window -title "Floor plan edge selector" edgePrompt`;
        columnLayout;
            text "Select edit points of the floor plan edge you want to assign.\n";
            rowLayout -numberOfColumns 2;
                button -label "Confirm" -command ("EdgeValidationHelper " + $win + " 1" + " 1");
                button -label "Cancel" -command ("deleteUI " + $win);
                setParent..;
    showWindow edgePrompt;
}

//Links the selected profile to  floor plan edge 
global proc LinkProfileToEntireFP()
{
    global string $profileCurves[];
    global int $fpEdgeToProfile[];
    global string $profileCurves[];
    
    string $curve[] = `ls -sl`;
    if (size($curve) != 1)
    {
        print "You must select one curve.\n";
        return;
    }
    
    //Find curve in curve list
    int $profileNum = 0; 
    for ($c in $profileCurves)
    {
        if ($c == $curve[0])
            break;
        $profileNum++;
    }
    
    int $i;
    for ($i = 0; $i < size($fpEdgeToProfile); $i++)
    {
        $fpEdgeToProfile[$i] = $profileNum; 
        
    }
    
}

//***************************************************************************
//TODO -MAKE SURE TO HANDLE CANCELS!!!! RIGHT NOW, WE AREN'T UPDATING ARRAYS!!!!!!!!!!!!!
//***************************************************************************

//Links anchor to floor plan
//Validates floor plan edge selection
global proc LinkAnchorToFloorPlan()
{
    global string $floorPlanCurve;

    //Call to select the file
    global string $anchorFiles[];  
    string $selectedFile = `fileDialog -dm "*.obj"`;  
    print ("Got file: " + $selectedFile);
    if (size($selectedFile) > 0) {
        $anchorFiles[size($anchorFiles)] = $selectedFile; 
    } else {
        //If user cancels, stop anchor process
        print "You hit cancel!!\n";
        return;
    }
  
    //Select floor plan & turn mode to edit points
    select -r $floorPlanCurve; 
    //doMenuNURBComponentSelection($floorPlanCurve, "editPoint");
    doMenuNURBComponentSelection($floorPlanCurve, "curveParameterPoint");
    $win = `window -title "Floor plan edge - Anchor selector" edgePrompt`;
        columnLayout;
            text "Select a point on the floor plan edge .\n";
            rowLayout -numberOfColumns 2;
                button -label "Confirm" -command ("LinkAnchorToFloorPlanHelper " + $win);
                button -label "Cancel" -command ("deleteUI " + $win);
                setParent..;
    showWindow edgePrompt;    
}

global proc LinkAnchorToFloorPlanHelper(string $win)
{

    global string $floorPlanCurve; 
    global float $anchorFPEdge[]; //edge#.percentInbetween
    global int $fpEdgeToProfile[]; 
    
    global string $anchorFiles[];
    global int $anchorProfileNum[]; //the profile the anchor is linked to 
    global float $anchorProfileEdge[]; //edge#.percentInbetween

    string $anchorPt[] = `ls -sl`;
    string $splitBracketF[];
    string $splitBracketB[]; 
    global int $fpEdgeToProfile[]; 
    tokenize $anchorPt[0] "[" $splitBracketF;  
    tokenize $splitBracketF[1] "]" $splitBracketB;
    print ("Got our anchor floor point: " + $splitBracketB[0]);
    $anchorFPEdge[size($anchorFPEdge)] = (float) $splitBracketB[0];
    
    //TODO - come up with a better way to mark the anchor
    float $pos[];
    string $cmd = ("pointOnCurve -position -pr " + string($splitBracketB[0]) + " " +  $floorPlanCurve); 
    $pos = `eval($cmd)`;
    circle -center $pos[0] $pos[1] $pos[2] -normal 0 1 0 -radius 0.5; 
    
    deleteUI $win;
    
    //Get the matching profile & have user select the profile
    string $fpEdge[];
    tokenize $splitBracketB[0] "." $fpEdge;
    int $edge = (int) $fpEdge[0];
    int $profile = $fpEdgeToProfile[$edge];
    LinkAnchorToProfile($profile);
    //Store which profile the edge is associated with
    $anchorProfileNum[size($anchorProfileNum)] = $profile;
}


//Links anchor to profile (Makes sure that the user has the correct profile selected)
global proc LinkAnchorToProfile(int $selectedProfile)
{
    global string $profileCurves[];
    select -r $profileCurves[$selectedProfile];  
    
    doMenuNURBComponentSelection($profileCurves[$selectedProfile], "curveParameterPoint");
    $win = `window -title "Profile - Anchor selection" edgePrompt`;
        columnLayout;
            text "Select the point on profile edge to add the anchor.\n";
            rowLayout -numberOfColumns 2;
                button -label "Confirm" -command ("AnchorToProfileHelper " + $win);
                button -label "Cancel" -command ("deleteUI " + $win);
                setParent..;
    showWindow edgePrompt;  
}

global proc AnchorToProfileHelper(string $win)
{
    global float $anchorProfileEdge[]; //edge#.percentInbetween

    string $anchorPt[] = `ls -sl`;
    string $splitBracketF[];
    string $splitBracketB[]; 

    //Split out the edge.percentOfEdge
    tokenize $anchorPt[0] "[" $splitBracketF;  
    tokenize $splitBracketF[1] "]" $splitBracketB;
    print ("Got our anchor profile point: " + $splitBracketB[0]);
    //Add the edge and percent to the anchorProfileEdge list
    $anchorProfileEdge[size($anchorProfileEdge)] = $splitBracketB[0];
    
    deleteUI $win;
    

}


//Creates a list of the edit points for a given curve (FP or Profile)
//Validates that the curve is a floor plan (1) or profile curve (2)
global proc vector[] GetEditPoints(string $curve, int $type)
{
    string $infoNode = `createNode curveInfo`;
    connectAttr ($curve +".worldSpace")  ($infoNode+".inputCurve");
    //#CV's = degree + curve span & #EP's = CV - 2 -> TODO- check! This was the case & now it seems I have changed a setting so they arethe same number
    int $degree = eval("getAttr "+$curve+".degree");
    int $span = eval("getAttr "+$curve+".spans");  	
	int $numEPs = $span + $degree;
    vector $editPoints[];
    
	for ($i=0; $i < $numEPs; $i++)
	{
		float $ep[]   = `pointPosition -l ( $curve + ".ep["+$i+"]" )`;
		vector $temp = <<$ep[0], $ep[1], $ep[2]>>;
		if ($ep[$type] != 0)
		{
		    error; 
		    return $editPoints;
		}
		print($ep[0]+" "+$ep[1]+" "+$ep[2]+"\n");
		$editPoints[$i] = $temp;
	}

	delete $infoNode; //Delete node bc we don't need it anymore	
	return $editPoints;
}

//Assigns the selected curve to the floor plan 
global proc vector[] CurveAsFP()
{
    global string $floorPlanCurve;
    global int $fpEdgeToProfile[]; 
    global int $fpHasAnchor[];
    
    string $fp[] = `ls -sl`;
        
    //One curve must be selected
    if (size($fp) !=  1)
    {
       window -title "Error";
       columnLayout;
           text "You must select one curve for the floor plan.\t";      
       showWindow;
       error;
    }
    
    $floorPlanCurve = $fp[0];
    //Floor plan curves can only have y value as 0 -> TODO- should we allow axis to be rotated in future versions?
    vector $floorPlanArray[];
    if ( catch ( $floorPlanArray = GetEditPoints($fp[0], 1) ) )
    {
       window -title "Error";
       columnLayout;
           text "The floor plan must lie on the xz plane.\t";      
       showWindow;
       error;
    }    else {
        //Make sure that the start = end
        int $size = size($floorPlanArray) - 1;
        vector $start = $floorPlanArray[0];
        float $sx = $start.x; float $sy = $start.y; float $sz = $start.z;
        vector $end = $floorPlanArray[$size];
        float $ex = $end.x; float $ey = $end.y; float $ez = $end.z;
        //TODO  - Do we want to give the user an option to close off or just do it?
        if ($sx != $ex || $sy != $ey || $sz != $ez)
        {
            string $curveCV = $floorPlanCurve + ".cv[" + string($size) + "]";
            print $curveCV;
            select -r $curveCV;
            curve -os -a -p $sx $sy $sz $floorPlanCurve;  
            $floorPlanArray[size($floorPlanArray)] = <<$sx, $sy, $sz>>;
        }    
        
        //Create null anchor array & profile array
        int $i;
        for ($i = 0; $i < size($floorPlanArray)-1; $i++)
        {
            $fpHasAnchor[$i] = 0;
            $fpEdgeToProfile[$i] = -1; 
        }
             
        return $floorPlanArray;
    }
}

//Sets the selected curves as profile curves
global proc CurveAsProfile()
{
    global int $numPtsInProfile[];
    global vector $pPoints[];
    global string $profileCurves[];
    global int $pHasAnchor[];
    
    vector $profilePoints[]; //Temp array for new profile points
    string $profile[] = `ls -sl`;  
    //TODO - validate that selection  is a curve-> ls -selection -showType gives "transform"?    
    //One curve must be selected
    if (size($profile) <  1)
    {
       window -title "Error";
       columnLayout;
           text "You must select one curve for the profile.\t";      
       showWindow;
       error;
    }
    int $currNumProfiles = size($numPtsInProfile);
    int $initialNumProfilePts = size($pPoints); 
    int $i;
    for ($i = 0; $i < size($profile); $i++)
    {
        print "\nIn profile ";
        print $profile[$i];
        print "\n";
        if (catch ($profilePoints = GetEditPoints($profile[$i], 0) ) )
        {
            print "Error";
        } else 
        {
            
            int $currNumPoints = size($pPoints);
            print "\nNumber points: ";
            print $currNumPoints;
            $profileCurves[$currNumProfiles + $i] = $profile[$i];
            $numPtsInProfile[$currNumProfiles + $i] = size($profilePoints);
            int $k;
            for ($k = 0; $k < size($profilePoints); $k++)
            {
                $pPoints[$currNumPoints + $k] = $profilePoints[$k];
            }
        }
    }
    //Add null anchor points for each additional profile
   for ($i = 0; $i < size($profilePoints); $i++)
   {
      $pAnchorPoints[$initialNumProfilePts + $i] = 0;
   }
}


//Creates a new building from the selected input
//global proc CreateMesh(vector $fpPoints[], int $fpHasAnchor[], int $fpEdgeToProfile[], vector $pPoints[], int $pHasAnchor[])
global proc CreateMesh(vector $fpPoints[], string $fileName)
{
    //Curve names
    global string $floorPlanCurve;
    global string $profileCurves[];
    global int $fpHasAnchor[];   
    //Profile info
    global int $fpEdgeToProfile[]; 
    global int $numPtsInProfile[]; 
    global vector $pPoints[];
    global int $pHasAnchor[];   
    //Anchor info
    global string $anchorFiles[];
    global float $anchorFPEdge[]; //edge#.percentInbetween
    global int $anchorProfileNum[]; //the profile the anchor is linked to 
    global float $anchorProfileEdge[]; //edge#.percentInbetween
    
    //**************************************************************************** 
    //Tests - TODO - take out when done testing
    print "IN CREATE MESH \nProfile curves:\n";
    int $k;
    for ($k = 0; $k < size($profileCurves); $k++)
    {
        print ($profileCurves[$k] + " ");
    }
    
    print "\nNumber of edges in floor plan vs points: ";
    print (size($fpEdgeToProfile) + " "+size($fpPoints)+"\n");
    
    int $i;
    print "Floor plan points: ";
    for ($i = 0; $i < size($fpPoints); $i++)
    {
        print ($fpPoints[$i] + " ");
    }
    print "\nFloor plan edge to profile link: ";
    for ($i = 0; $i < size($fpEdgeToProfile); $i++)
    {
        print ($fpEdgeToProfile[$i]+" ");
    }

    //TODO - figure out how to delete the nodes if they exist
   // if(`objExists transformNode`)
           //doDelete;
     //Create node
    createNode transform -n transformNode;
    createNode mesh -n meshShape -p transformNode;
    sets -add initialShadingGroup meshShape;
    createNode AuthoringToolPlugin -n ProTrusionNode1;
    int $numPts = size($fpPoints);    
    setAttr ProTrusionNode1.numPoints $numPts;
    //TODO - make dynamic again
    setAttr -type "string" ProTrusionNode1.fileName $fileName;
    //setAttr -type "string" ProTrusionNode1.fileName "C:\\Users\\Beth\\MayaAuthoringTool\\ProtrusionAnchors.txt";
    connectAttr ProTrusionNode1.outputMesh meshShape.inMesh;
    //For each anchor -> link data from anchor node to the transform node, link to imported obj  file
    //TODO - change when done testing to bring in
    
    /*file -import -type "OBJ" -ra true -mergeNamespacesOnClash false -namespace "testAnchor" -options "mo=1"  -pr -loadReferenceDepth "all" "C:/Users/Beth/MayaAuthoringTool/testAnchor.obj";
    select -r "testAnchor:*";
    setAttr "testAnchor:default1.rotateY" 45; //This is parsed from the edge direction from C++
    setAttr "testAnchor:default1.rotateX" 20; //From the direction plane of the active plan at height anchoer height 
    */
   float $xx[];
   float $yy[];
   float $zz[];
 
 getAttr ProTrusionNode1.anchorRotations;
 getAttr ProTrusionNode1.anchorPosition;
   float $r[] = `getAttr ProTrusionNode1.anchorRotations`;
   float $trans[] = `getAttr ProTrusionNode1.anchorPosition`;
   print ("Size of trans: " + string(size($trans)) + " Size of rot "+ string(size($r))+"\n");
    for ($i = 0; $i < size($trans); $i+=3)
    { 
       $xx[$i] = $trans[$i];
       $yy[$i] = $trans[$i+1];
       $zz[$i] = $trans[$i+2];
       print ("Setting x: " + string($xx[$i]) + " Setting y: " + string($yy[$i]) + " setting z: " + string($zz[$i]));
    }
    for ($i = 0; $i < size($anchorFiles); $i++)
    {
       string $anchorNamespace = ("anchor" + string($i)); 
       file -import -type "OBJ" -ra true -mergeNamespacesOnClash false -namespace $anchorNamespace -options "mo=1"  -pr -loadReferenceDepth "all" $anchorFiles[$i];
       select -r ($anchorNamespace+ ":*");
       string $select[] = `ls -sl`;
       string $newAnchorNameSpace = $select[3];
       print ("NAME SPACE : " + $newAnchorNameSpace+ " \n");
       int $testI = 0; 
       for ($estI = 0; $testI < size($select) ; $testI++)
       {
           print ("THE NAME IS: " + $select[$testI] + "\n");
       }
       setAttr ($newAnchorNameSpace + ".rotateY") $r[$i]; 
       setAttr ($newAnchorNameSpace + ".translateX") $xx[$i];
       setAttr ($newAnchorNameSpace + ".translateY") $yy[$i];
       setAttr ($newAnchorNameSpace + ".translateZ") $zz[$i];
    }
    
testUpdateAnchor();
        
  /*  connectAttr ProTrusionNode1.outputMesh $pPoints;
    connectAttr ProTrusionNode1.outputMesh $pHasAnchor;
    connectAttr ProTrusionNode1.outputMesh $fpEdgeToProfile;
    connectAttr ProTrusionNode1.outputMesh $fpHasAnchor;*/
    
 
    //Draw mesh
}

global proc testUpdateAnchor()
{
        global string $anchorFiles[];
       float $xx[];
   float $yy[];
   float $zz[];
 
 getAttr ProTrusionNode1.anchorRotations;
 getAttr ProTrusionNode1.anchorPosition;
   float $r[] = `getAttr ProTrusionNode1.anchorRotations `;
   float $trans[] = `getAttr ProTrusionNode1.anchorPosition `;
   print ("Size of trans: " + string(size($trans)) + " Size of rot "+ string(size($r))+"\n");
    for ($i = 0; $i < size($trans); $i+=3)
    { 
       $xx[$i] = $trans[$i];
       $yy[$i] = $trans[$i+1];
       $zz[$i] = $trans[$i+2];
       print ("Setting x: " + string($xx[$i]) + " Setting y: " + string($yy[$i]) + " setting z: " + string($zz[$i]));
    }
    for ($i = 0; $i < size($anchorFiles); $i++)
    {
       string $anchorNamespace = ("anchor" + string($i)); 
       //file -import -type "OBJ" -ra true -mergeNamespacesOnClash false -namespace $anchorNamespace -options "mo=1"  -pr -loadReferenceDepth "all" $anchorFiles[$i];
       select -r ($anchorNamespace+ ":*");
       string $select[] = `ls -sl`;
       $anchorNamespace = $select[3];
       setAttr ($anchorNamespace + ".rotateY") $r[$i]; 
       setAttr ($anchorNamespace + ".translateX") $xx[$i];
       setAttr ($anchorNamespace + ".translateY") $yy[$i];
       setAttr ($anchorNamespace + ".translateZ") $zz[$i];
    }
    
}

//Updates the selected mesh (just redraw the mesh-> used later when handle more than 1 building)
global proc EditMesh()
{

    
}

global proc GenerateText(vector $fpPoints[], int $updateOrNew)
{
    //TODO - update this to current directory
    //Curve names
    global string $floorPlanCurve;
    global string $profileCurves[];
    //Profile info
    global int $fpEdgeToProfile[]; 
    global int $numPtsInProfile[]; 
    global vector $pPoints[];
    //Anchor info
    global int $fpHasAnchor[]; //TODO - maybe get rid of these in cleanup?
    global int $pHasAnchor[];
    //REAL anchor info
    //Each of these anchors are linked to a specific fp & profile edge (indices match for each anchor)
    global float $anchorFPEdge[]; //edge#.percentInbetween
    global int $anchorProfileNum[]; //the profile the anchor is linked to 
    global float $anchorProfileEdge[]; //edge#.percentInbetween
   
    string $plugin = "GUI_V1.mel";
    string $result = substituteAllString(dirname(eval( "whatIs " + $plugin )), "Script found in: ","");
    string $filePath = ($result + "/ProTrusionOutput.txt") ; 
   /* if ((filetest -r $filePath))  {
        print "File exists\n";*/
        $fileId = `fopen $filePath "w"` ; 
    print ($filePath + "\n");
    
    //***************************************************************************************************
    //Start of floorplan parse
    fprint $fileId ("#FloorPlanStart\r\n") ;  
    int $i;
    for ($i = 0; $i < size($fpPoints)-1; $i++)
    {
        vector $pt = $fpPoints[$i];
        fprint $fileId (" #FloorPointStart " + string($pt.x) + " " + string($pt.z) + " ");
        $pt = $fpPoints[$i+1];
        fprint $fileId (" #FloorPointEnd " + string($pt.x) + " " + string($pt.z) + " ");
        fprint $fileId ("#Profile " + string($fpEdgeToProfile[$i]) + " ");
        fprint $fileId ("#Anchor " + string($fpHasAnchor[$i]) + "\r\n");
    }  
    fprint $fileId (" #FloorPlanEnd \r\n\r\n") ;  
    
    //***************************************************************************************************
    //Start of profile parse
    fprint $fileId (" #Profiles " + string(size($profileCurves)) +"\r\n");
    int $k; 
    for ($i = 0; $i < size($profileCurves); $i++)
    {
        fprint $fileId (" #ProfileStart" + string($i) + "\r\n");
        for ($k = 0; $k < $numPtsInProfile[$i]-1; $k++)
        {
            vector $pt = $pPoints[$i+$k];
            fprint $fileId (" #ProfilePointStart " + string($pt.y) + " " + string($pt.z) + " ");
            $pt = $fpPoints[$i+$k+1];
            fprint $fileId ("#ProfilePointEnd " + string($pt.y) + " " + string($pt.z) + " ");  
            fprint $fileId ("#Anchor " + string($pHasAnchor[$i]) + "\r\n");      
        }  
        fprint $fileId (" #ProfileEnd" + string($i) +"\r\n");      
    }
    
    //***************************************************************************************************
    //Start of anchor parse
    print ("Num anchors: " + string(size($anchorFPEdge)) + "\n");  
    fprint $fileId("\r\n#NumAnchors " + string(size($anchorFPEdge)) + "\r\n");
    for ($i = 0; $i < size($anchorFPEdge); $i++)
    {
        fprint $fileId (" #AnchorStart" + string($i) + "\r\n");
            fprint $fileId (" #FloorPlanEdge " + string($anchorFPEdge[$i]) + " ");
            fprint $fileId ("#ProfileNum  " + string($anchorProfileNum[$i]) + " ");  
            fprint $fileId ("#ProfileEdge " + string($anchorProfileEdge[$i]) + "\r\n");       
        fprint $fileId (" #AnchorEnd" + string($i) +"\r\n");      
    }
 
    fclose $fileId ; 
    
    if ($updateOrNew == 0) {
         CreateMesh($fpPoints, $filePath);
   } else {
       int $numPts = size($fpPoints); 
       setAttr ProTrusionNode1.numPoints $numPts;
   }
        
}


//****************************************************************************************************************
// GUI LAYOUT 
//****************************************************************************************************************
global proc ProGUI()
{
    //All the variables needed to LinkAnchorToFloorPlan the final mesh
    //Floor plan 
    vector $fpPoints[];
    global int $fpHasAnchor[];
    global int $fpEdgeToProfile[];
    //Profile
    global vector $pPoints[];
    global int $numPtsInProfile[];
    global int $pHasAnchor[];       
        
    print "Number points in profile at start: ";
    int $size = size($pPoints);
    print $size;
    print "\n"; 
    
if(`window -exists myFormPanelWindow`)
    deleteUI -window myFormPanelWindow;
if (`modelPanel -exists floorPlanPanel`)
    deleteUI -panel floorPlanPanel;
if (`modelPanel -exists profilePanel`)
    deleteUI -panel profilePanel;
window
-title "Pro-trusion"
-w 650
-h 600

myFormPanelWindow;
//form layout
formLayout -numberOfDivisions 100 myFormForm;

//Menu bar
menuBarLayout popUpMenu;
    menu -label "Floor plan";
        menuItem
        -label "Load floor plan"
        -command "LoadFloorPlan()";
        menuItem
        -label "Save floor plan"
        -command "SaveFloorPlan()";
        menuItem
        -label "Create new plan"
        -command "CreateFloorPlan()";
        menuItem
        -l "Set selected curve as floor plan" 
        -c "$fpPoints = CurveAsFP()";
     menu -label "Profile";
        menuItem
        -label "Load profile"
        -command "LoadProfile()";
        menuItem
        -label "Save profile"
        -command "SaveProfile()";
        menuItem
        -label "Create new profile"
        -command "CreateNewProfile()";
        menuItem
        -label "Delete selected profile"
        -command "DeleteProfile()";
        menuItem
        -label "Set selected curve(s) as a profile curve"
        -command "CurveAsProfile()";
     menu -label "Assign profile/anchors";
        menuItem
        -label "Link profile to floor plan edge"
        -command "LinkProfileToFloorPlan()";
        menuItem
        -label "Link selected profile to all edges"
        -command "LinkProfileToEntireFP()";
        menuItem
        -label "Create new anchor"
        -command "LinkAnchorToFloorPlan()";
     menu -label "Create building mesh";
         menuItem
         -label "Generate building"
         //-command " CreateMesh($fpPoints, $fpHasAnchor, $fpEdgeToProfile, $pPoints, $pHasAnchor)";
         -command "CreateMesh($fpPoints, "")";
         menuItem
         -label "Edit mesh"
         -command "EditMesh()";
         menuItem
         -label "Generate building with text file"
         -command "GenerateText($fpPoints, 0)";
         menuItem
         -label "Update building via text file"
         -command "GenerateText($fpPoints, 1)";
     menu -label "Help";
         menuItem
         -label "Help"
         -command "Help()";
    setParent..;

string $sep = `separator -style "singleDash"`;

//Descriptions
string $floorPlanTxt = `text "Floor plan input\t\t\t\t\t"`;
string $profileTxt = `text "Profile input"`;

//Floor plan editor
modelPanel -mbv 0 -cam "top" floorPlanPanel;
$currentModelPanel = `modelPanel -q -modelEditor floorPlanPanel`;
modelEditor -e -cam "top" -grid 1 -nurbsCurves 1 -nurbsSurfaces 1 -polymeshes 0 -dimensions 1 $currentModelPanel;
setParent ..;

//Profile editor
modelPanel -mbv 0 -cam "side" profilePanel;
$currentModelPanel2 = `modelPanel -q -modelEditor profilePanel`;
modelEditor -e -cam "side" -grid 1 -nurbsCurves 1 -nurbsSurfaces 1 -polymeshes 0 -dimensions 1 $currentModelPanel2;
setParent ..;

/*
button -l "Set selected curve as floor plan" 
       -c "$fpPoints = CurveAsFP()"
       LeftButton;
*/
       
formLayout -edit

-attachForm $sep top 19
-attachForm $sep left 0
-attachForm $sep right 0
-attachForm $sep bottom 625

-attachForm $floorPlanTxt top 20
-attachForm $floorPlanTxt left 0
-attachForm $floorPlanTxt right 325
-attachForm $floorPlanTxt bottom 600

-attachForm $profileTxt top 20
-attachForm $profileTxt left 0
-attachForm $profileTxt right -325
-attachForm $profileTxt bottom 600

-attachForm popUpMenu top 0
-attachForm popUpMenu left 0
-attachForm popUpMenu right 0
-attachForm popUpMenu bottom 0

-attachForm floorPlanPanel top 45
-attachForm floorPlanPanel left 10
-attachForm floorPlanPanel right 370
-attachForm floorPlanPanel bottom 30

-attachForm profilePanel top 45
-attachForm profilePanel left 360
-attachForm profilePanel right 10
-attachForm profilePanel bottom 30

/*
-attachControl LeftButton top 2 floorPlanPanel
-attachForm LeftButton left 0
-attachPosition LeftButton right 2 50
-attachForm LeftButton bottom 2
*/

//Form
myFormForm;
showWindow myFormPanelWindow;
}


//TODO - add to C++ to add/remove menu item when the plugin is loaded
global proc createMenuItem()
{
   global string $gMainWindow;
    setParent $gMainWindow;
    global string $ProTrusionMenu;
    $ProTrusionMenu = `menu -label "Pro-Trusion" -parent $gMainWindow -tearOff on`;
    menuItem
    -label "Open Pro-Trusions Options"  
    -command "ProGUI()";                
}

global proc deleteMenuItem()
{
    global string $ProTrusionMenu;
    deleteUI -menu $ProTrusionMenu;
}